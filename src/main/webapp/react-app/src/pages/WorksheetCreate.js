import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Container,
  Paper,
  Typography,
  TextField,
  Button,
  Box,
  Grid,
  CircularProgress,
  Alert,
  IconButton,
  Chip,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Divider,
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  Add as AddIcon,
  Delete as DeleteIcon,
} from '@mui/icons-material';
import { worksheetService, corporationService } from '../services/api';
import { useAuth } from '../contexts/AuthContext';

const WorksheetCreate = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [serviceProviders, setServiceProviders] = useState([]);
  
  const today = new Date().toISOString().split('T')[0];
  
  const [formData, setFormData] = useState({
    // Metadata fields
    startingDate: '',
    finishingDate: '',
    issueDate: today,
    serviceProviderId: '',
    awardDate: '',
    issuingUserId: user?.id || '',
    aigp: [],
    posaCode: '',
    posaDescription: '',
    pospCode: '',
    pospDescription: '',
    operations: [],
    // Feature fields
    features: []
  });

  const [newAigp, setNewAigp] = useState('');
  const [newOperation, setNewOperation] = useState({
    operationCode: '',
    operationDescription: '',
    areaHa: ''
  });

  useEffect(() => {
    fetchServiceProviders();
  }, []);

  const fetchServiceProviders = async () => {
    try {
      const response = await corporationService.getAll();
      setServiceProviders(response.data || []);
    } catch (error) {
      console.error('Error fetching service providers:', error);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleAddAigp = () => {
    if (newAigp.trim()) {
      setFormData(prev => ({
        ...prev,
        aigp: [...prev.aigp, newAigp.trim()]
      }));
      setNewAigp('');
    }
  };

  const handleRemoveAigp = (index) => {
    setFormData(prev => ({
      ...prev,
      aigp: prev.aigp.filter((_, i) => i !== index)
    }));
  };

  const handleAddOperation = () => {
    if (newOperation.operationCode && newOperation.operationDescription && newOperation.areaHa) {
      setFormData(prev => ({
        ...prev,
        operations: [...prev.operations, {
          operation_code: newOperation.operationCode,
          operation_description: newOperation.operationDescription,
          area_ha: parseFloat(newOperation.areaHa)
        }]
      }));
      setNewOperation({
        operationCode: '',
        operationDescription: '',
        areaHa: ''
      });
    }
  };

  const handleRemoveOperation = (index) => {
    setFormData(prev => ({
      ...prev,
      operations: prev.operations.filter((_, i) => i !== index)
    }));
  };

  const formatDate = (date) => {
    if (!date) return null;
    return date; // Already in YYYY-MM-DD format from input
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      // Create the GeoJSON structure expected by the backend
      const worksheetData = {
        type: "FeatureCollection",
        crs: {
          type: "name",
          properties: {
            name: "EPSG:3763" // Portuguese grid system
          }
        },
        features: formData.features, // Empty for now, can be added later
        metadata: {
          id: null, // Will be generated by backend
          starting_date: formatDate(formData.startingDate),
          finishing_date: formatDate(formData.finishingDate),
          issue_date: formatDate(formData.issueDate),
          service_provider_id: parseInt(formData.serviceProviderId),
          award_date: formatDate(formData.awardDate),
          issuing_user_id: parseInt(formData.issuingUserId || user?.id),
          aigp: formData.aigp,
          posa_code: formData.posaCode,
          posa_description: formData.posaDescription,
          posp_code: formData.pospCode,
          posp_description: formData.pospDescription,
          operations: formData.operations
        }
      };

      await worksheetService.create(worksheetData);
      navigate('/dashboard/worksheets');
    } catch (error) {
      console.error('Error creating worksheet:', error);
      setError(error.response?.data?.message || 'Erro ao criar ficha de obra');
    } finally {
      setLoading(false);
    }
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns} locale={ptBR}>
      <Container maxWidth="md">
        <Box sx={{ mb: 4, mt: 2 }}>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate('/dashboard/worksheets')}
          >
            Voltar
          </Button>
          <Typography variant="h4" gutterBottom sx={{ mt: 2 }}>
            Criar Nova Ficha de Obra
          </Typography>
        </Box>

        {error && (
          <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>
            {error}
          </Alert>
        )}

        <Paper elevation={3} sx={{ p: 4 }}>
          <form onSubmit={handleSubmit}>
            <Grid container spacing={3}>
              {/* Dates Section */}
              <Grid item xs={12}>
                <Typography variant="h6" gutterBottom>
                  Datas
                </Typography>
                <Divider sx={{ mb: 2 }} />
              </Grid>

              <Grid item xs={12} md={6}>
                <DatePicker
                  label="Data de Início"
                  value={formData.startingDate}
                  onChange={(value) => handleDateChange('startingDate', value)}
                  renderInput={(params) => <TextField {...params} fullWidth required />}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <DatePicker
                  label="Data de Fim"
                  value={formData.finishingDate}
                  onChange={(value) => handleDateChange('finishingDate', value)}
                  renderInput={(params) => <TextField {...params} fullWidth required />}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <DatePicker
                  label="Data de Emissão"
                  value={formData.issueDate}
                  onChange={(value) => handleDateChange('issueDate', value)}
                  renderInput={(params) => <TextField {...params} fullWidth required />}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <DatePicker
                  label="Data de Adjudicação"
                  value={formData.awardDate}
                  onChange={(value) => handleDateChange('awardDate', value)}
                  renderInput={(params) => <TextField {...params} fullWidth />}
                />
              </Grid>

              {/* Service Provider Section */}
              <Grid item xs={12}>
                <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                  Fornecedor de Serviços
                </Typography>
                <Divider sx={{ mb: 2 }} />
              </Grid>

              <Grid item xs={12} md={6}>
                <FormControl fullWidth required>
                  <InputLabel>Fornecedor de Serviços</InputLabel>
                  <Select
                    name="serviceProviderId"
                    value={formData.serviceProviderId}
                    onChange={handleChange}
                    label="Fornecedor de Serviços"
                  >
                    {serviceProviders.map((provider) => (
                      <MenuItem key={provider.id} value={provider.id}>
                        {provider.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              {/* AIGP Section */}
              <Grid item xs={12}>
                <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                  AIGP
                </Typography>
                <Divider sx={{ mb: 2 }} />
              </Grid>

              <Grid item xs={12}>
                <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
                  <TextField
                    label="Adicionar AIGP"
                    value={newAigp}
                    onChange={(e) => setNewAigp(e.target.value)}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault();
                        handleAddAigp();
                      }
                    }}
                    size="small"
                  />
                  <Button
                    variant="outlined"
                    onClick={handleAddAigp}
                    startIcon={<AddIcon />}
                  >
                    Adicionar
                  </Button>
                </Box>
                <Box sx={{ mt: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                  {formData.aigp.map((code, index) => (
                    <Chip
                      key={index}
                      label={code}
                      onDelete={() => handleRemoveAigp(index)}
                    />
                  ))}
                </Box>
              </Grid>

              {/* POSA/POSP Section */}
              <Grid item xs={12}>
                <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                  Códigos POSA e POSP
                </Typography>
                <Divider sx={{ mb: 2 }} />
              </Grid>

              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Código POSA"
                  name="posaCode"
                  value={formData.posaCode}
                  onChange={handleChange}
                  required
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Descrição POSA"
                  name="posaDescription"
                  value={formData.posaDescription}
                  onChange={handleChange}
                  required
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Código POSP"
                  name="pospCode"
                  value={formData.pospCode}
                  onChange={handleChange}
                  required
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Descrição POSP"
                  name="pospDescription"
                  value={formData.pospDescription}
                  onChange={handleChange}
                  required
                />
              </Grid>

              {/* Operations Section */}
              <Grid item xs={12}>
                <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                  Operações
                </Typography>
                <Divider sx={{ mb: 2 }} />
              </Grid>

              <Grid item xs={12}>
                <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', mb: 2 }}>
                  <TextField
                    label="Código da Operação"
                    value={newOperation.operationCode}
                    onChange={(e) => setNewOperation({ ...newOperation, operationCode: e.target.value })}
                    size="small"
                  />
                  <TextField
                    label="Descrição da Operação"
                    value={newOperation.operationDescription}
                    onChange={(e) => setNewOperation({ ...newOperation, operationDescription: e.target.value })}
                    size="small"
                    sx={{ minWidth: 300 }}
                  />
                  <TextField
                    label="Área (ha)"
                    type="number"
                    value={newOperation.areaHa}
                    onChange={(e) => setNewOperation({ ...newOperation, areaHa: e.target.value })}
                    size="small"
                    sx={{ width: 100 }}
                  />
                  <Button
                    variant="outlined"
                    onClick={handleAddOperation}
                    startIcon={<AddIcon />}
                  >
                    Adicionar
                  </Button>
                </Box>

                {formData.operations.map((operation, index) => (
                  <Box
                    key={index}
                    sx={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      p: 2,
                      mb: 1,
                      backgroundColor: 'grey.50',
                      borderRadius: 1,
                    }}
                  >
                    <Typography>
                      <strong>{operation.operation_code}</strong> - {operation.operation_description} ({operation.area_ha} ha)
                    </Typography>
                    <IconButton
                      color="error"
                      onClick={() => handleRemoveOperation(index)}
                    >
                      <DeleteIcon />
                    </IconButton>
                  </Box>
                ))}
              </Grid>

              {/* Submit Button */}
              <Grid item xs={12}>
                <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>
                  <Button
                    type="submit"
                    variant="contained"
                    color="primary"
                    disabled={loading}
                    size="large"
                  >
                    {loading ? <CircularProgress size={24} /> : 'Criar Ficha de Obra'}
                  </Button>
                </Box>
              </Grid>
            </Grid>
          </form>
        </Paper>
      </Container>
    </LocalizationProvider>
  );
};

export default WorksheetCreate;
